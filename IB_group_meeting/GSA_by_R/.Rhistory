dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$baySeq_FDR < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$TSPM_pvalue < 0.05  & f.merged$P.Value < 0.05),])
f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID
intersect(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID,
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID)
glist_0_3 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT3.noCUTOFF.csv", header = TRUE, sep=",")
head(glist_0_3)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_3/DE/R/de_gene_expr_count.csv")
head(dt)
intersect(dt$ID , glist_0_3$symbol)
f.merged <- merge(dt, glist_0_3, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_3)
dim(f.merged)
intersect(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID,
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID)
glist_0_6 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT6.noCUTOFF.csv", header = TRUE, sep=",")
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_6/DE/R/de_gene_expr_count.csv")
head(dt)
length(intersect(dt$ID , glist_0_6$symbol))
f.merged <- merge(dt, glist_0_6, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_6)
dim(f.merged)
intersect(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID,
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID)
glist_0_9 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT9.noCUTOFF.csv", header = TRUE, sep=",")
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_9/DE/R/de_gene_expr_count.csv")
head(dt)
length(intersect(dt$ID , glist_0_9$symbol))
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_9)
dim(f.merged)
intersect(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID,
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID)
intersect(f.merged[(f.merged$TSPM_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID,
f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),]$ID)
dim(f.merged[f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
glist_0_6 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT6.noCUTOFF.csv", header = TRUE, sep=",")
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_6/DE/R/de_gene_expr_count.csv")
head(dt)
length(intersect(dt$ID , glist_0_6$symbol))
f.merged <- merge(dt, glist_0_6, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_6)
dim(f.merged)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
glist_0_3 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT3.noCUTOFF.csv", header = TRUE, sep=",")
head(glist_0_3)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_3/DE/R/de_gene_expr_count.csv")
head(dt)
intersect(dt$ID , glist_0_3$symbol)
f.merged <- merge(dt, glist_0_3, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_3)
dim(f.merged)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
dim(f.merged[(f.merged$TSPM_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$baySeq_FDR < 0.05  & f.merged$P.Value < 0.05),])
glist_0_6 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT6.noCUTOFF.csv", header = TRUE, sep=",")
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_6/DE/R/de_gene_expr_count.csv")
head(dt)
length(intersect(dt$ID , glist_0_6$symbol))
f.merged <- merge(dt, glist_0_6, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_6)
dim(f.merged)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
dim(f.merged[(f.merged$baySeq_FDR < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
dim(f.merged[(f.merged$TSPM_pvalue < 0.05  & f.merged$P.Value < 0.05),])
head(f.merged)
head(dt)
glist_0_6$symbol
length(intersect(dt$ID , glist_0_6$symbol))
dim(f.merged)
glist_0_9 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT9.noCUTOFF.csv", header = TRUE, sep=",")
dim(glist_0_9)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_9/DE/R/de_gene_expr_count.csv")
head(dt)
dim(dt)
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
head(f.merged)
f.merged.all <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol", all = TRUE)
dim(f.merged.all)
which(f.merged.all$ID %in%  f.merged$ID )
which(f.merged.all$ID %in%  glist_0_9$symbol )
which(f.merged.all$ID %in%  f.merged$ID )
which(f.merged.all$ID %in%  glist_0_9$symbol )
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
head(f.merged)
which(f.merged.all$ID %in%  f.merged$ID )
nrow(f.merged.all [-which( f.merged.all$ID %in% glist_0_9$symbol) ,])
nrow(f.merged.all [-which( f.merged.all$PROBEID %in% f.merged$PROBEID) ,])
nrow(f.merged.all [-which( f.merged.all$ID %in% f.merged$PROBEID) ,])
glist_0_9 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT9.noCUTOFF.csv", header = TRUE, sep=",")
dim(glist_0_9)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_9/DE/R/de_gene_expr_count.csv")
head(dt)
dim(dt)
length(intersect(dt$ID , glist_0_9$symbol))
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
head(f.merged)
dim(f.merged)
length(intersect(dt$ID , glist_0_9$symbol))
f.merged.all <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol", all = TRUE)
dim(f.merged.all)
head(f.merged.all)
dim(glist_0_9)
head(glist_0_9)
(glist_0_9$X %in% "229819_at")
glist_0_9[(glist_0_9$X %in% "229819_at"),]
head(f.merged.all)
head(f.merged)
f.merged[f.merged$X.y  %in% "229819_at"),]
f.merged [(f.merged$X.y  %in% "229819_at"),]
glist_0_9[(glist_0_9$X %in% "229819_at"),]
f.merged [(f.merged$X.y  %in% "229819_at"),]
dim(dt)
head(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,])
dim(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,])
dim(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,])
length(intersect(dt$ID , glist_0_9$symbol))
dim(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,]$ID)
length(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,]$ID)
unique(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,]$ID)
length(intersect(dt$ID , glist_0_9$symbol))
glist_0_9 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT9.noCUTOFF.csv", header = TRUE, sep=",")
dim(glist_0_9)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_9/DE/R/de_gene_expr_count.csv")
head(dt)
dim(dt)
length(intersect(dt$ID , glist_0_9$symbol))
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
head(f.merged)
dim(f.merged)
glist_0_9[(glist_0_9$X %in% "229819_at"),]
f.merged [(f.merged$X.y  %in% "229819_at"),]
unique(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,]$ID)
dim(dt)
dim(glist_0_9)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
venn.plot <- draw.triple.venn (
area1 = 1500 ,
area2 = 2000,
area3 = 700,
n12 = 766,
n13 = 430 ,
n23 = 266,
n123 =  59 ,
ind = FALSE,
category = c(name1, name2, name3),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green"),
);
venn.plot <- draw.triple.venn (
area1 = 1500 ,
area2 = 2000,
area3 = 700,
n12 = 766,
n13 = 430 ,
n23 = 266,
n123 =  59 ,
ind = FALSE,
category = c("name1", "name2", "name3"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green"),
);
glist_0_3 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT3.noCUTOFF.csv", header = TRUE, sep=",")
head(glist_0_3)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_3/DE/R/de_gene_expr_count.csv")
head(dt)
intersect(dt$ID , glist_0_3$symbol)
f.merged <- merge(dt, glist_0_3, by.x = "ID", by.y = "symbol")
dim(dt)
dim(glist_0_3)
dim(f.merged)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
dim(f.merged[(f.merged$baySeq_FDR < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$edgeR_pvalue < 0.05  ),])
dim(f.merged[(f.merged$TSPM_pvalue < 0.05  & f.merged$P.Value < 0.05),])
venn.plot <- draw.triple.venn (
area1 = 1500 ,
area2 = 2000,
area3 = 700,
n12 = 766,
n13 = 430 ,
n23 = 266,
n123 =  59 ,
ind = FALSE,
category = c("name1", "name2", "name3"),
fill = c("blue", "red", "green"),
lty = "blank",
cex = 2,
cat.cex = 2,
cat.col = c("blue", "red", "green"),
);
grid.draw(venn.plot)
glist_0_9 <- read.table ("X:/project2016/woychik-ma-rnaseq/DN-MA-analysis/glist.T0vsT9.noCUTOFF.csv", header = TRUE, sep=",")
dim(glist_0_9)
dt <- read.csv("X:/project2016/woychik-ma-rnaseq/RNAseqEnsemble/DN_Day_0_9/DE/R/de_gene_expr_count.csv")
head(dt)
dim(dt)
length(intersect(dt$ID , glist_0_9$symbol))
f.merged <- merge(dt, glist_0_9, by.x = "ID", by.y = "symbol")
head(f.merged)
dim(f.merged)
glist_0_9[(glist_0_9$X %in% "229819_at"),]
f.merged [(f.merged$X.y  %in% "229819_at"),]
unique(f.merged [(f.merged$ID  %in% intersect(dt$ID , glist_0_9$symbol)) ,]$ID)
dim(dt)
dim(glist_0_9)
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  & f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$P.Value < 0.05),])
dim(f.merged[(f.merged$DESeq_pvalue < 0.05  ),])
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
library(GSA)
setwd("x:/project2016/GSA_by_R/")
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
x1 <- read.csv("NormedMicroarray.csv")
str(matrix(rnorm(1000*9),ncol=9))
x <- x1[3:10]
y <- c(rep(1, 4), rep(2, 4))
y
str(x)
z <- x1
#Make "Gene name" as string
z$X <- as.character(z$X)
str(z)
#Make "Gene symbol"" as string
z$GeneSymbol <- as.character(z$GeneSymbol)
str(z)
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
genesets.in.upperCase <- toupper (geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
genesets.in.upperCase
listToUpper <-  funciton (listIN)
{
list2return <- c(list())
for i in 1:length(listIN){
list2return[[i]] <- toupper(listIN[[i]])
}
return (list2return)
}
listToUpper <-  function (listIN)
{
list2return <- c(list())
for i in 1:length(listIN){
list2return[[i]] <- toupper(listIN[[i]])
}
return (list2return)
}
genesets.in.upperCase <-listToUpper (geneset$genesets)
listToUpper <-  function (listIN)
{
list2return <- c(list())
for (i in 1:length(listIN)){
list2return[[i]] <- toupper(listIN[[i]])
}
return (list2return)
}
genesets.in.upperCase <-listToUpper (geneset$genesets)
genesets.in.upperCase
gsafit <- GSA(x, y,genesets.in.upperCase, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20161005.gmt")
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
genesets.in.upperCase <-listToUpper (geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
geneset$genesets
clean.gmt.data <- function (db)
{
temp.geneset <- c(list())
for (i in 1:length(db$genesets))
{
temp.geneset[[i]] <- db$genesets[[i]]
if (length(which(temp.geneset[[i]]=="")) > 0 )
{
temp.geneset[[i]]  <- temp.geneset[[i]][-which(temp.geneset[[i]]=="")]
}
}
db$genesets <- temp.geneset
return (db)
}
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset
cleaned.geneset$geneset.names[[17]]
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset$geneset.names[[17]] <- "V2Sox2 target genes in esophagus"
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=.5))
gsafit$fdr.lo
gsafit$fdr.hi
gsafit$gene.scores
GSA.plot(gsafit)
GSA.genescores(5, c1$genesets, gsafit, z$GeneSymbol)
GSA.plot(gsafit, fac = 1, FDRcut = 1)
for (i in 1:length(gsals$negative[,1])){
print(gsals$negative[,2][i])
print(GSA.genescores(as.numeric(gsals$negative[,1][i]),
c1$genesets, gsafit, z$GeneSymbol))
cat("\n")
}
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names ))
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=1))
gsafit
cleaned.geneset$geneset.names
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
##  Initial gene sets
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
##  Initial gene sets
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
geneset$geneset.names
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset$geneset.names[[17]] <- "V2Sox2 target genes in esophagus"
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=1))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=.5))
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20161005.gmt")
##  Gene sets are capitalized
genesets.in.upperCase <-listToUpper (geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
##  Initial gene sets
set.seed(1234567)
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
##  Initial gene sets
set.seed(1234567)
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
##  Gene sets are capitalized
set.seed(1234567)
genesets.in.upperCase <-listToUpper (geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1)
)
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset$geneset.names[[17]] <- "V2Sox2 target genes in esophagus"
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
set.seed(1234567)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=.5))
geneset <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20161005.gmt")
##  Initial gene sets
set.seed(1234567)
gsafit <- GSA(x, y, geneset$genesets, z$GeneSymbol, resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=.5))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
##  Gene sets are capitalized
set.seed(1234567)
genesets.in.upperCase <-listToUpper (geneset$genesets)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=0.5))
print(GSA.listsets(gsafit, geneset$geneset.names , FDRcut=1))
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset$geneset.names[[17]] <- "V2Sox2 target genes in esophagus"
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
set.seed(1234567)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=.5))
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=1))
x1 <- read.csv("normalization Pax9 siRNA vs. Control.csv")
str(x1)
str(matrix(rnorm(1000*9),ncol=9))
str(x1)
x <- x1[-c(1,2)]
x
str(x)
c1<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20161005.gmt")
cleaned.geneset       <- clean.gmt.data (geneset)
genesets.in.upperCase <-listToUpper(cleaned.geneset$genesets)
set.seed(1234567) ## EXTREMELY important!!  -- JYL
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
str(gsafit)
plot(gsafit$GSA.scores)
gsafit$fdr.lo
gsafit$fdr.hi
gsafit$gene.scores
GSA.plot(gsafit)
GSA.listsets(gsafit, c1$geneset.names, FDRcut=.5)
GSA.correlate(c1$genesets, z$GeneSymbol)
set.seed(1234567) ## EXTREMELY important!!  -- JYL
gsa2 <- GSA.func(x, y, c1$genesets, z$GeneSymbol, resp.type = "Two class unpaired")
str(gsa2)
#for loop from 1:length(gsals$negative[,1])
GSA.genescores(5, c1$genesets, gsafit, z$GeneSymbol)
GSA.plot(gsafit, fac = 1, FDRcut = 1)
gsals <- GSA.listsets(gsafit, c1$geneset.names, FDRcut=.5)
str(gsals)
str(gsals$negative)
gsals$negative[,1]
length(gsals$negative[,1])
as.numeric(gsals$negative[,1][1])
GSA.genescores(as.numeric(gsals$negative[,1][1]), c1$genesets, gsafit, z$GeneSymbol)
for (i in 1:length(gsals$negative[,1])){
print(gsals$negative[,2][i])
print(GSA.genescores(as.numeric(gsals$negative[,1][i]),
c1$genesets, gsafit, z$GeneSymbol))
cat("\n")
}
for (i in 1:length(gsals$positive[,1])){
print(gsals$positive[,2][i])
print(GSA.genescores(as.numeric(gsals$positive[,1][i]),
c1$genesets, gsafit, z$GeneSymbol))
cat("\n")
}
print(GSA.listsets(gsafit, c1$geneset.names, FDRcut=.5))
for (i in as.numeric(gsals$negative[,1])){
print(c1$geneset.names[i])
}
c1<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
cleaned.geneset       <- clean.gmt.data (geneset)
genesets.in.upperCase <-listToUpper(cleaned.geneset$genesets)
set.seed(1234567) ## EXTREMELY important!!  -- JYL
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
##  Examine GSA results  ## Non-essential -- JYL
str(gsafit)
plot(gsafit$GSA.scores)
gsafit$fdr.lo
gsafit$fdr.hi
gsafit$gene.scores
GSA.plot(gsafit)
GSA.listsets(gsafit, c1$geneset.names, FDRcut=.5)
c1<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
geneset<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
cleaned.geneset <- clean.gmt.data (geneset)
cleaned.geneset$geneset.names[[17]] <- "V2Sox2 target genes in esophagus"
genesets.in.upperCase <-listToUpper (cleaned.geneset$genesets)
set.seed(1234567)
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=1))
print(GSA.listsets(gsafit, cleaned.geneset$geneset.names , FDRcut=.5))
c1 <- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
cleaned.geneset       <- clean.gmt.data (c1)
genesets.in.upperCase <-listToUpper(cleaned.geneset$genesets)
set.seed(1234567) ## EXTREMELY important!!  -- JYL
gsafit <- GSA(x, y,genesets.in.upperCase, toupper(z$GeneSymbol), resp.type = "Two class unpaired", nperms = 1000)
str(gsafit)
plot(gsafit$GSA.scores)
gsafit$fdr.lo
gsafit$fdr.hi
gsafit$gene.scores
GSA.plot(gsafit)
GSA.listsets(gsafit, c1$geneset.names, FDRcut=.5)
geneset<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20140627.gmt")
str(geneset$genesets)
geneset<- GSA.read.gmt( "cleaningData/Knowledge_based_gene_sets_20161005.gmt")
str(geneset$genesets)
geneset$geneset.names
