library(XLConnect)
source("helperScripts/analysisFuncs.R")
getwd()
quiz <- c(
24,27,30,30,30,30,30,30,21,27,0,0
)
hist(quiz)
quiz1 <- c(
24,27,30,30,30,30,30,30,21,27,0,0
)
hist(quiz1)
shiny::runApp('X:/myGit/shiny-server/mimic-google-form')
library(shinyjs)
runApp('X:/myGit/shiny-server/mimic-google-form')
runApp('X:/myGit/shiny-server/ggExtra-ggMarginal-demo')
runApp('X:/myGit/shiny-server/bcl')
shiny::runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
getwd()
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/STARTapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
shiny::runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
packageVersion("plotly")
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
source('http://bioconductor.org/biocLite.R')
biocLite('recount')
shiny::runApp('X:/temp/rforest')
runApp('X:/temp/rforest')
shiny::runApp('X:/temp/rforest')
shiny::runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
library(shiny) #devtools::install_github("rstudio/shiny"); devtools::install_github("rstudio/shinyapps")
library(reshape2)
library(ggplot2)
library(ggthemes)
#library(shinyIncubator) #devtools::install_github("rstudio/shinyIncubator")
library(gplots)
#library(rjson)
#library(base64enc)
library(ggvis)
library(dplyr)
library(tidyr)
library(DT) #devtools::install_github('ramnathv/htmlwidgets'); devtools::install_github('rstudio/DT')
library(limma)
#library(DESeq2)
library(edgeR)
library(RColorBrewer)
library(pheatmap)
library(shinyBS)
library(plotly)
library(markdown)
library(NMF)
library(scales)
library(heatmaply)
library(readr)
?bsCollapse
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('STARTapp')
shiny::runApp('shinyapp/OCRI3')
tabPanel("Getting Started",
fluidRow(
column(4,wellPanel(
h4("Getting Started with SOCRISP"),
a("Features", href="#features"),br(),
a("Data Formats", href = "#dataformats"), br(),
a("Save Data for Future Upload", href="#savedata"), br(),
a("More Help", href = "#help"), br()
)
),#column
column(8,
# includeMarkdown("instructions/Instructions.md"),
includeMarkdown("instructions/landing.md"),
#)
footer=p(hr(),p("ShinyApp created by ", strong("{Yicheng Li + Xiaoxin Chen}")," of ",align="center",width=4),
p(("Department of Mathematics and Statistics, University of North Carolina at Charlotte"),align="center",width=4),
p(("Cancer Research Program, North Carolina Central University"),align="center",width=4),
p(("Copyright (C) 2017, code licensed under GPLv3"),align="center",width=4),
#    p(a("Liu, Y et al (2015) `Quantitative risk stratification of oral leukoplakia with exfoliative cytology` PloSOne.     doi: 10.1371/journal.pone.0126760.",href="http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0126760"),align="center",width=4),
p(a("Liu, Y et al (2017) `Quantitative prediction of oral cancer risk in patients with oral leukoplakia` Oncotarget.  doi: 10.18632/oncotarget.17550.",href="http://www.impactjournals.com/oncotarget/index.php?journal=oncotarget&page=article&op=view&path%5B%5D=17550&path%5B%5D=56152"),align="center",width=4)
))
))
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/pdfReport')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
warnings()
gewtsd()
getwd()
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/STARTapp')
install.packages("ggvis")
runApp('X:/myGit/STARTapp')
install.packages("shinyBS")
runApp('X:/myGit/STARTapp')
install.packages("heatmaply")
runApp('X:/myGit/STARTapp')
install.packages("readr")
runApp('X:/myGit/STARTapp')
install.packages("rticles")
library(rticles)
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
getwd()
install.packages("doSNOW")
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doParallel)
library(doMC)
library(SomaticSignatures)
shiny::runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/myGit/shiny-examples/082-word-cloud')
library(tm)
library(wordcloud)
library(memoise)
runApp('X:/project2017/ShinyApps/SigGen')
175*2+100+25
shiny::runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
shiny::runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
shiny::runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/project2017/miRNA_thuy-ai')
shiny::runApp('X:/project2017/miRNA_thuy-ai')
shiny::runApp('X:/myGit/STARTapp')
runApp('X:/myGit/STARTapp')
vcf.file <- "X:/project2017/exomeSeq/JasonProject/MEC/Human_hg38/B1_Output_Unfiltered_Mutation_Report.vcf"
vcf <- readVcf(vcf.file ,  "hg38")
vr <- as(vcf, "VRanges")
library(VariantAnnotation)
a
vcf.file <- "X:/project2017/exomeSeq/JasonProject/MEC/Human_hg38/B1_Output_Unfiltered_Mutation_Report.vcf"
vcf <- readVcf(vcf.file ,  "hg38")
str(vcf)
vr <- as(vcf, "VRanges")
str(vr)
ref(vr)
ref(vr) %in% DNA_BASES
alt(vr) %in% DNA_BASES
granges(vr)
library(BSgenome.Hsapiens.1000genomes.hg38)
hich(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES)
which(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES)
vr.subset <- vr[which(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES),]
ctx <- mutationContext(vr.subset, BSgenome.Mmusculus.UCSC.hg38)
library(SomaticSignatures)
ctx <- mutationContext(vr.subset, BSgenome.Mmusculus.UCSC.hg38)
library(BSgenome.Hsapiens.UCSC.hg38)
ctx <- mutationContext(vr.subset, BSgenome.Hsapiens.UCSC.hg38)
shiny::runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/project2017/ShinyApps/SigGen')
setwd("x:/project2017/GeneticAssociationAnalysis/with_TAGSter/workingDir/")
source("../Rscripts/helperFuncs.R")
load("genoJenData_mitoCarta_TAGstered_4495_SNPs.rda")
#load("genoJenData_full_TAGstered_130351_SNPs.rda")
#dim(genoJenData.full.TAGstered)
dim(genoJenData.mitoCarta.TAGstered)
load("mito_genotype_in_numeric.rda")
head(mito.genotype.in.numeric)
dim(mito.genotype.in.numeric)
length(which(colnames(genoJenData.mitoCarta.TAGstered) %in% colnames(mito.genotype.in.numeric)))
#[1] 31
genoJenData.mitoCarta.TAGstered.in.mito.snp <- genoJenData.mitoCarta.TAGstered[,c(1:16, which(colnames(genoJenData.mitoCarta.TAGstered) %in% colnames(mito.genotype.in.numeric)))]
dim(genoJenData.mitoCarta.TAGstered.in.mito.snp)
head(genoJenData.mitoCarta.TAGstered.in.mito.snp)
##===================================================
##  remove mono-morphic
##  and, convert to numeric phenotype
##===================================================
dim(genoJenData.mitoCarta.TAGstered)
head(genoJenData.mitoCarta.TAGstered)
tempDM <- genoJenData.mitoCarta.TAGstered.in.mito.snp[c(1:10),]
tempDM
dim(tempDM)
tempDM.2 <- tempDM [,c(17:47)]
temp.snp.mod.2 <- filter.mono.morphic (tempDM.2 )
temp.snp.mod.2
filter.mono.morphic.mod.2 <- function (in.matrix, cols2work)
{
snp.2.exclude <- c()
index = 1
for (i in 1:dim(in.matrix)[1])
{
if (length(unique(as.character(as.vector(in.matrix [i,cols2work])))) ==1 )
{
snp.2.exclude[index] = i
index = index + 1
}
}
return(snp.2.exclude)
}
tempDM
row2exclude <- filter.mono.morphic.mod.2 (tempDM , c(17:47))
row2exclude
row2exclude <- filter.mono.morphic.mod.2 (genoJenData.mitoCarta.TAGstered.in.mito.snp , c(17:47))
row2exclude
(length(row2exclude) > 0)
if (length(row2exclude) > 0)
{
temp.snp <- genoJenData.mitoCarta.TAGstered.in.mito.snp[-row2exclude,]
}else{
temp.snp <- genoJenData.mitoCarta.TAGstered.in.mito.snp
}
dim(temp.snp)
which(genoJenData.mitoCarta.TAGstered$JAX.SNP.ID %in% "JAX00606436")
which(temp.snp$JAX.SNP.ID %in% "JAX00606436")
temp.snp[which(temp.snp$JAX.SNP.ID %in% "JAX00606436"),]
#system.time(
ptm <- proc.time()
temp.snp.in.numeric <- covert.2.numeric.parallel (temp.snp)
proc.time() - ptm
#)
temp.snp.in.numeric
#dim(temp.snp.in.numeric )
rownames(temp.snp.in.numeric) <- temp.snp[,1]
colnames(temp.snp.in.numeric) <- colnames(temp.snp)[-c(1:16)]
nu.snp.in.numeric.4490 <- temp.snp.in.numeric*2
which(rownames(temp.snp.in.numeric) %in% "JAX00606436")
temp.snp.in.numeric[which(rownames(temp.snp.in.numeric) %in% "JAX00606436"),]
nu.snp.in.numeric.4490[which(rownames(nu.snp.in.numeric.4490) %in% "JAX00606436"),]
##=========================================
mito.genotype.in.numeric <- mito.genotype.in.numeric[,order(colnames(mito.genotype.in.numeric))]
nu.snp.in.numeric.4490  <- nu.snp.in.numeric.4490 [,order(colnames(nu.snp.in.numeric.4490))]
colnames(nu.snp.in.numeric.4490) == colnames(mito.genotype.in.numeric)
ptm <- proc.time()
registerDoParallel(cl = number.of.workers)
##  use a nested %dopar%
##  https://cran.r-project.org/web/packages/foreach/vignettes/nested.pdf
new.variable <- foreach (i = 1:dim(nu.snp.in.numeric.4490)[1],
.combine =  'rbind' ) %do% {
foreach (j = 1:dim(mito.genotype.in.numeric)[1],
.combine = 'rbind') %:%
# %dopar% {
foreach (k = 1:dim(mito.genotype.in.numeric)[2],
.combine = "cbind") %dopar%  {
if (is.na(nu.snp.in.numeric.4490[i,k]) | is.na (mito.genotype.in.numeric[j,k])) {
var.new = "NA"
}else{
snps <- paste(nu.snp.in.numeric.4490[i,k] , mito.genotype.in.numeric[j,k], sep="")
var.new <-  switch (snps,
"00"  = "A",
"01"  = "B",
"10"  = "C",
"11"  = "D",
"20"  = "E",
"21"  = "F"
)
}
}
}
proc.time() - ptm
stopCluster(cl)
registerDoParallel(cl = number.of.workers)
new.genotypes <- foreach (i = 1:dim(nu.snp.in.numeric.4490)[1],
.combine =  'rbind' ) %:%
foreach (j = 1:dim(mito.genotype.in.numeric)[1],
.combine = 'rbind') %dopar% {
paste (rownames(nu.snp.in.numeric.4490)[i], rownames(mito.genotype.in.numeric)[j], sep = "_")
}
stopCluster(cl)
colnames(new.variable) <- colnames(nu.snp.in.numeric.4490)
rownames(new.variable) <- new.genotypes[,1]
save (new.variable, file = "engineered_genotyps_2989175_windows.rda")
dim(new.variable)
file2save = paste ("engineered_genotyps_" , dim (new.variable)[1], "_linuxs.rda", sep="")
file2save
file2save = paste ("engineered_genotyps_" , dim (new.variable)[1], "_windows.rda", sep="")
save (new.variable, file = file2save )
head(rownames(new.variable))
justNuSNP <- apply (as.data.frame(rownames(new.variable)),  1, function(x) { return(unlist(strsplit(as.character(x), "_"))[1]) } )
row2exclude
ptm <- proc.time()
num <- filter.mono.morphic.mod.2 (genoJenData.mitoCarta.TAGstered.in.mito.snp , c(17:47))
proc.time() - ptm
filter.mono.morphic.mod.2.paral <- function (in.matrix, cols2work)
{
# snp.2.exclude <- c()
#  index = 1
snp.2.exclude <- foreach (i = 1:dim(in.matrix)[1],
.combine = 'c') %dopar%
{
if (length(unique(as.character(as.vector(in.matrix [i,cols2work])))) ==1 )
{
#snp.2.exclude[index] = i
#index = index + 1
i
}
}
return(snp.2.exclude)
}
ptm <- proc.time()
num2 <- filter.mono.morphic.mod.2.paral (genoJenData.mitoCarta.TAGstered.in.mito.snp , c(17:47))
proc.time() - ptm
filter.mono.morphic.mod.2
filter.mono.morphic.mod.2.paral
str(genoJenData.mitoCarta.TAGstered.in.mito.snp)
getwd()
setwd("x:/learningR/learningParallel/")
save (genoJenData.mitoCarta.TAGstered.in.mito.snp, file = "foreach_sample_dm.rda")
same(num, num2)
all.equal( num, num2)
library(parallel)
library(foreach)
library(doParallel)
I <- 10^3L
number.of.workers <- max (1, (detectCores() - 1))
cl <- makeCluster(number.of.workers)
registerDoParallel(cl)
for.loop <- function(I) {
out <- double(I)
for (i in seq_len(I))
out[i] <- sqrt(i)
out
}
foreach.do <- function(I) {
out <- foreach(i = seq_len(I), .combine=c) %do%
sqrt(i)
out
}
foreach.dopar <- function(I) {
out <- foreach(i = seq_len(I), .combine=c) %dopar%
sqrt(i)
out
}
stopCluster(cl)
identical(for.loop(I), foreach.do(I), foreach.dopar(I))
## [1] TRUE
library(rbenchmark)
benchmark(for.loop(I), foreach.do(I), foreach.dopar(I))
number.of.workers
stopCluster(cl)
cl <- makeCluster(number.of.workers)
getwd()
