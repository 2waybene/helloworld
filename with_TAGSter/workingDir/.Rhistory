"C57BR.cdJ",
"C57L.J",
"C58.J",
"CAST.EiJ",
"CBA.J",
"CE.J",
"DBA.2J",
"FVB.NJ",
"I.LnJ",
"KK.HIJ",
"MA.MyJ",
"MOLF.EiJ",
"MRL.MpJ",
"NOR.LtJ",
"NZO.HILtJ",
"NZW.LacJ",
"P.J",
"PL.J",
"PWD.PhJ",
"PWK.PhJ",
"RIIIS.J",
"SJL.J",
"SM.J",
"SWR.J",
"WSB.EiJ",
"NOD.LtJ"
)
dt <- read.csv("data/phenotyp-from-Jen.csv")
#dim(dt)
phenotypeFromJen <- dt
strain.mod <- gsub ("/", ".", dt$Strain)
##  Make sure the order of strain names are correct!!
#for (i in 1:36)
#{
#  cat (as.vector(dt$Strain)[i])
#  cat("\t")
#  cat (columns2retain[i])
#  cat("\n")
#}
##  it is checked ##FIXME
cat ("Here are the strains..\n")
columns2retain[c(1:36)]
##  Modify rownames for phenotyp data
phenotypeFromJen <- phenotypeFromJen[,-1]
cat ("Here are the phenotypes..\n")
colnames(phenotypeFromJen)
rownames(phenotypeFromJen) <- columns2retain[c(1:36)]
load("data/Genotype_file_36_strains_623054_SNPs.rda")
dim(genoData)
#[1] 623046     52
load("data/SNP-processed-for-36-phenotypes.rda")
dim(snp.4.study.filtered)
#[1]596664     52
load("data/genotypeInNumeric-for-36-phenotypes.rda")
dim(genotypeInNumeric)
#[1] 596664     36
colnames(genotypeInNumeric)
head(row.names(genotypeInNumeric))
load("/data/kinship-for-36-phenotypes-02012017.rda")
load("data/Genotype_file_36_strains_623054_SNPs.rda")
dim(genoData)
#[1] 623046     52
load("data/SNP-processed-for-36-phenotypes.rda")
dim(snp.4.study.filtered)
#[1]596664     52
load("data/genotypeInNumeric-for-36-phenotypes.rda")
dim(genotypeInNumeric)
#[1] 596664     36
colnames(genotypeInNumeric)
head(row.names(genotypeInNumeric))
load("data/kinship-for-36-phenotypes-02012017.rda")
K = kinship.out$kinship
strains = kinship.out$strain
strains
load ( "data/processed-SNP-4-model.rda")
dim(processData$xs.w.meta)
str(processData$xs)
#rownames(phenotypeFromJen) <- columns2retain[c(1:36)]
dim(xs.in.model)
phenotypeFromJen <- phenotypeFromJen[order(rownames(phenotypeFromJen)),]
rownames(phenotypeFromJen))
rownames(phenotypeFromJen)
dim(phenotypeFromJen)
rownames(phenotypeFromJen)
colnames(phenotypeFromJen)
xs <- as.data.frame(processData$xs)
rownames(xs)
processData$xs.w.meta[,1]
colnames(processData$xs.w.meta[-c(1:16)])
dim(xs)
rownames(xs) <- processData$xs.w.meta[,1]
colnames(xs) <- colnames(processData$xs.w.meta[-c(1:16)])
(colnames(xs))
order(colnames(xs))
xs <- xs[,order(colnames(xs))]
order(colnames(xs))
strains
colnames(xs)
strains = colnames(xs)
strains == colnames(xs)
strains = kinship.out$strain
strains == colnames(xs)
dim(phenotypeFromJen)
rownames(phenotypeFromJen)
colnames(phenotypeFromJen)
strains ==  colnames(phenotypeFromJen)
rownames(phenotypeFromJen)
strains ==  rownames(phenotypeFromJen)
as.matrix(phenotypeFromJen[,1])
Y.in.model <- as.matrix(phenotypeFromJen[,1]) # "Protein.P4"
rs <- emma.ML.LRT(Y.in.model, as.matrix (xs), K)
temp  <- as.vector(sapply(snp.4.study[,6],as.character))
chrs  <- gsub ("chr", "", temp)
pos  = snp.4.study[,8]
pval = rs$ps
pval.emma.ML.LRT <- rs$ps
setwd("X:/project2016/GoldenGateProject/RmdProj1")
library(HardyWeinberg)
library(XLConnect)
source("helperScripts/analysisFuncs.R")
getwd()
quiz <- c(
24,27,30,30,30,30,30,30,21,27,0,0
)
hist(quiz)
quiz1 <- c(
24,27,30,30,30,30,30,30,21,27,0,0
)
hist(quiz1)
shiny::runApp('X:/myGit/shiny-server/mimic-google-form')
library(shinyjs)
runApp('X:/myGit/shiny-server/mimic-google-form')
runApp('X:/myGit/shiny-server/ggExtra-ggMarginal-demo')
runApp('X:/myGit/shiny-server/bcl')
shiny::runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
getwd()
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/STARTapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/bcl')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
shiny::runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
packageVersion("plotly")
runApp('X:/myGit/shiny-server/LearningFromDeanBCLapp/test')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
runApp('X:/myGit/shiny-server/pdfReport')
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
source('http://bioconductor.org/biocLite.R')
biocLite('recount')
shiny::runApp('X:/temp/rforest')
runApp('X:/temp/rforest')
shiny::runApp('X:/temp/rforest')
shiny::runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
library(shiny) #devtools::install_github("rstudio/shiny"); devtools::install_github("rstudio/shinyapps")
library(reshape2)
library(ggplot2)
library(ggthemes)
#library(shinyIncubator) #devtools::install_github("rstudio/shinyIncubator")
library(gplots)
#library(rjson)
#library(base64enc)
library(ggvis)
library(dplyr)
library(tidyr)
library(DT) #devtools::install_github('ramnathv/htmlwidgets'); devtools::install_github('rstudio/DT')
library(limma)
#library(DESeq2)
library(edgeR)
library(RColorBrewer)
library(pheatmap)
library(shinyBS)
library(plotly)
library(markdown)
library(NMF)
library(scales)
library(heatmaply)
library(readr)
?bsCollapse
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('STARTapp')
shiny::runApp('shinyapp/OCRI3')
tabPanel("Getting Started",
fluidRow(
column(4,wellPanel(
h4("Getting Started with SOCRISP"),
a("Features", href="#features"),br(),
a("Data Formats", href = "#dataformats"), br(),
a("Save Data for Future Upload", href="#savedata"), br(),
a("More Help", href = "#help"), br()
)
),#column
column(8,
# includeMarkdown("instructions/Instructions.md"),
includeMarkdown("instructions/landing.md"),
#)
footer=p(hr(),p("ShinyApp created by ", strong("{Yicheng Li + Xiaoxin Chen}")," of ",align="center",width=4),
p(("Department of Mathematics and Statistics, University of North Carolina at Charlotte"),align="center",width=4),
p(("Cancer Research Program, North Carolina Central University"),align="center",width=4),
p(("Copyright (C) 2017, code licensed under GPLv3"),align="center",width=4),
#    p(a("Liu, Y et al (2015) `Quantitative risk stratification of oral leukoplakia with exfoliative cytology` PloSOne.     doi: 10.1371/journal.pone.0126760.",href="http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0126760"),align="center",width=4),
p(a("Liu, Y et al (2017) `Quantitative prediction of oral cancer risk in patients with oral leukoplakia` Oncotarget.  doi: 10.18632/oncotarget.17550.",href="http://www.impactjournals.com/oncotarget/index.php?journal=oncotarget&page=article&op=view&path%5B%5D=17550&path%5B%5D=56152"),align="center",width=4)
))
))
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/pdfReport')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
runApp('shinyapp/OCRI3')
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
warnings()
gewtsd()
getwd()
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
runApp('X:/myGit/STARTapp')
install.packages("ggvis")
runApp('X:/myGit/STARTapp')
install.packages("shinyBS")
runApp('X:/myGit/STARTapp')
install.packages("heatmaply")
runApp('X:/myGit/STARTapp')
install.packages("readr")
runApp('X:/myGit/STARTapp')
install.packages("rticles")
library(rticles)
shiny::runApp('X:/myGit/myOCRI-iii/shinyapp/pdfReport')
getwd()
install.packages("doSNOW")
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doSNOW)
cl <- makeCluster(2, type="SOCK")
registerDoSNOW(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind) %dopar% (m[i,] / mean(m[i,]))
stopCluster(cl)
library(doParallel)
library(doMC)
library(SomaticSignatures)
shiny::runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/project2017/ShinyApps/SigGen')
runApp('X:/myGit/shiny-examples/082-word-cloud')
library(tm)
library(wordcloud)
library(memoise)
runApp('X:/project2017/ShinyApps/SigGen')
175*2+100+25
shiny::runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
shiny::runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
runApp('X:/project2017/ShinyApps/miRNATag')
shiny::runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/myOCRI-iii/shinyapp/OCRI3')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
runApp('X:/myGit/WorldCloud')
shiny::runApp('X:/project2017/miRNA_thuy-ai')
shiny::runApp('X:/project2017/miRNA_thuy-ai')
shiny::runApp('X:/myGit/STARTapp')
runApp('X:/myGit/STARTapp')
vcf.file <- "X:/project2017/exomeSeq/JasonProject/MEC/Human_hg38/B1_Output_Unfiltered_Mutation_Report.vcf"
vcf <- readVcf(vcf.file ,  "hg38")
vr <- as(vcf, "VRanges")
library(VariantAnnotation)
a
vcf.file <- "X:/project2017/exomeSeq/JasonProject/MEC/Human_hg38/B1_Output_Unfiltered_Mutation_Report.vcf"
vcf <- readVcf(vcf.file ,  "hg38")
str(vcf)
vr <- as(vcf, "VRanges")
str(vr)
ref(vr)
ref(vr) %in% DNA_BASES
alt(vr) %in% DNA_BASES
granges(vr)
library(BSgenome.Hsapiens.1000genomes.hg38)
hich(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES)
which(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES)
vr.subset <- vr[which(ref(vr) %in% DNA_BASES & alt(vr) %in% DNA_BASES),]
ctx <- mutationContext(vr.subset, BSgenome.Mmusculus.UCSC.hg38)
library(SomaticSignatures)
ctx <- mutationContext(vr.subset, BSgenome.Mmusculus.UCSC.hg38)
library(BSgenome.Hsapiens.UCSC.hg38)
ctx <- mutationContext(vr.subset, BSgenome.Hsapiens.UCSC.hg38)
shiny::runApp('X:/myGit/WorldCloud')
setwd("x:/project2017/GeneticAssociationAnalysis/orthologGenes/liftover_mm9_mm10/")
setwd("../../TAGSter/tagster/indir/")
list.files(".")
setwd("x:/project2017/GeneticAssociationAnalysis/orthologGenes/liftover_mm9_mm10/")
snp4TAGSter <- read.csv("../../TAGSter/tagster/indir/mouse")
str(snp4TAGSter$snp )
tagSNP <- read.table ("../../TAGSter/tagster/tagged_SNP.txt", sep = "\t")
str(tagSNP)
length(mitoSNP[which(mitoSNP$V1 %in% tagSNP$V2),1])
str(mitoSNP)
mitoSNP <- read.table("Genotype_file_223_strains_623054_SNPs_w_mm10_w_mitocarta_ShortVersion.txt", sep = "\t")
str(mitoSNP)
length(mitoSNP[which(as.character(mitoSNP$V1) %in% as.character(tagSNP$V2)),1])
length(mitoSNP[which(mitoSNP$V1 %in% tagSNP$V2),1])
str(tagSNP)
str(mitoSNP)
length(mitoSNP[which(mitoSNP$V1 %in% tagSNP$V2),1])
rmarkdown::shiny_prerendered_clean('X:/project2017/GeneticAssociationAnalysis/with_TAGSter/Rscripts/prepareData.R')
setwd("x:/project2017/GeneticAssociationAnalysis/with_TAGSter/workingDir/")
load("genoJenData_full_TAGstered_130351_SNPs.rda")
load("genoJenData_mitoCarta_TAGstered_4495_SNPs.rda")
##=====================================
##  modify column names for strain ID
##=====================================
columns2retain <- c (
"X129X1.SvJ",
"X129S1SvlmJ",
"A.J",
"AKR.J",
"BALB.cByJ",
"BALB.cJ",
"BTBRT.tf.J",
"BUB.BnJ",
"C3H.HeJ",
"C57BL.10J",
"C57BL.6J",
"C57BR.cdJ",
"C57L.J",
"C58.J",
"CAST.EiJ",
"CBA.J",
"CE.J",
"DBA.2J",
"FVB.NJ",
"I.LnJ",
"KK.HIJ",
"MA.MyJ",
"MOLF.EiJ",
"MRL.MpJ",
"NOR.LtJ",
"NZO.HILtJ",
"NZW.LacJ",
"P.J",
"PL.J",
"PWD.PhJ",
"PWK.PhJ",
"RIIIS.J",
"SJL.J",
"SM.J",
"SWR.J",
"WSB.EiJ",
"NOD.LtJ"
)
length(which(colnames(genoJenData.full.TAGstered) %in% columns2retain))
dim(genoJenData.mitoCarta.TAGstered)
